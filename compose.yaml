# 指定撰写格式。 支持的版本有：2.x、3.x
version: "3.9"

# 允许服务相互通信的层。
networks:
  # 自定义的网络名称
  turing:
    # 指定该网络应使用哪个驱动程序。
    driver: bridge

# 服务是应用程序中计算资源的抽象定义，可以独立于其他组件进行扩展/替换。
services:
  turing-redis:
    # 覆盖容器映像声明的默认命令（即通过 Dockerfile 的 CMD）。
    command: redis-server /etc/redis/conf/redis.conf
    # 指定自定义容器名称，而不是生成的默认名称。
    container_name: turing-redis
    # 声明用于服务容器的自定义主机名。
    hostname: turing-redis
    # 指定启动容器的图像。
    image: redis:7.0.12
    # 定义服务容器附加到的网络，引用顶级网络键下的条目。
    networks:
      - turing
    # 暴露端口。 指定两个端口 (HOST:CONTAINER)，或仅指定容器端口（选择临时主机端口）。
    ports:
      - "6379:6379"
    # 定义服务容器必须可以访问的挂载主机路径或命名卷。
    volumes:
      - ./docker/redis/conf/redis.conf:/etc/redis/conf/redis.conf
      - ./docker/redis/data:/etc/redis/data
  turing-elasticsearch:
    # 指定自定义容器名称，而不是生成的默认名称。
    container_name: turing-elasticsearch
    # 定义容器中设置的环境变量。
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      DISCOVERY: single-node
    # 声明运行以确定该服务的容器是否“健康”的检查。
    #    healthcheck:
    #      test:
    #        [
    #          "CMD-SHELL",
    #          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
    #        ]
    # 声明用于服务容器的自定义主机名。
    hostname: turing-elasticsearch
    # 指定启动容器的图像。
    image: elasticsearch:${STACK_VERSION}
    # 定义服务容器附加到的网络，引用顶级网络键下的条目。
    networks:
      - turing
    # 暴露端口。 指定两个端口 (HOST:CONTAINER)，或仅指定容器端口（选择临时主机端口）。
    ports:
      - "9200:9200"
  turing-kibana:
    # 指定自定义容器名称，而不是生成的默认名称。
    container_name: turing-kibana
    # 表示服务之间的启动和关闭依赖关系。
    depends_on:
      - turing-elasticsearch
    # 定义容器中设置的环境变量。
    environment:
      I18N_LOCALE: zh-CN
      SERVER_PUBLICBASEURL: http://turing-kibana:5601
    # 声明运行以确定该服务的容器是否“健康”的检查。
    #    healthcheck:
    #      test:
    #        [
    #          "CMD-SHELL",
    #          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
    #        ]
    # 声明用于服务容器的自定义主机名。
    hostname: turing-kibana
    # 指定启动容器的图像。
    image: kibana:${STACK_VERSION}
    # 定义服务容器附加到的网络，引用顶级网络键下的条目。
    networks:
      - turing
    # 暴露端口。 指定两个端口 (HOST:CONTAINER)，或仅指定容器端口（选择临时主机端口）。
    ports:
      - "5601:5601"
  turing-logstash:
    # 指定自定义容器名称，而不是生成的默认名称。
    container_name: turing-logstash
    # 表示服务之间的启动和关闭依赖关系。
    depends_on:
      - turing-elasticsearch
    # 声明用于服务容器的自定义主机名。
    hostname: turing-logstash
    # 指定启动容器的图像。
    image: logstash:${STACK_VERSION}
    # 定义服务容器附加到的网络，引用顶级网络键下的条目。
    networks:
      - turing
    # 暴露端口。 指定两个端口 (HOST:CONTAINER)，或仅指定容器端口（选择临时主机端口）。
    ports:
      - "5044:5044"
  turing-backend:
    # 指定用于从源创建容器映像的构建配置。
    build:
      # 包含 Dockerfile 的目录的路径，或 git 存储库的 url。
      context: ./docker/turing-backend
      # Compose 使用备用文件进行构建。 还必须指定构建路径。
      dockerfile: Dockerfile
    # 指定自定义容器名称，而不是生成的默认名称。
    container_name: turing-backend
    # 声明用于服务容器的自定义主机名。
    hostname: turing-backend
    # 定义服务容器附加到的网络，引用顶级网络键下的条目。
    networks:
      - turing
    # 暴露端口。 指定两个端口 (HOST:CONTAINER)，或仅指定容器端口（选择临时主机端口）。
    ports:
      - "8080:8080"
  turing-nginx:
    # 指定自定义容器名称，而不是生成的默认名称。
    container_name: turing-nginx
    # 声明用于服务容器的自定义主机名。
    hostname: turing-nginx
    # 指定启动容器的图像。
    image: nginx:1.25.1
    # 定义服务容器附加到的网络，引用顶级网络键下的条目。
    networks:
      - turing
    # 暴露端口。 指定两个端口 (HOST:CONTAINER)，或仅指定容器端口（选择临时主机端口）。
    ports:
      - "80:80"
    # 定义服务容器必须可以访问的挂载主机路径或命名卷。
    volumes:
      - ./docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/docs/html:/etc/nginx/docs/html